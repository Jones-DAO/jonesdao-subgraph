// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddToContractWhitelist extends ethereum.Event {
  get params(): AddToContractWhitelist__Params {
    return new AddToContractWhitelist__Params(this);
  }
}

export class AddToContractWhitelist__Params {
  _event: AddToContractWhitelist;

  constructor(event: AddToContractWhitelist) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddressesSet extends ethereum.Event {
  get params(): AddressesSet__Params {
    return new AddressesSet__Params(this);
  }
}

export class AddressesSet__Params {
  _event: AddressesSet;

  constructor(event: AddressesSet) {
    this._event = event;
  }

  get addresses(): AddressesSetAddressesStruct {
    return changetype<AddressesSetAddressesStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class AddressesSetAddressesStruct extends ethereum.Tuple {
  get feeStrategy(): Address {
    return this[0].toAddress();
  }

  get stakingStrategy(): Address {
    return this[1].toAddress();
  }

  get optionPricing(): Address {
    return this[2].toAddress();
  }

  get priceOracle(): Address {
    return this[3].toAddress();
  }

  get volatilityOracle(): Address {
    return this[4].toAddress();
  }

  get feeDistributor(): Address {
    return this[5].toAddress();
  }

  get optionsTokenImplementation(): Address {
    return this[6].toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Bootstrap extends ethereum.Event {
  get params(): Bootstrap__Params {
    return new Bootstrap__Params(this);
  }
}

export class Bootstrap__Params {
  _event: Bootstrap;

  constructor(event: Bootstrap) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strikes(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EpochExpired extends ethereum.Event {
  get params(): EpochExpired__Params {
    return new EpochExpired__Params(this);
  }
}

export class EpochExpired__Params {
  _event: EpochExpired;

  constructor(event: EpochExpired) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settlementPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExpireDelayToleranceUpdate extends ethereum.Event {
  get params(): ExpireDelayToleranceUpdate__Params {
    return new ExpireDelayToleranceUpdate__Params(this);
  }
}

export class ExpireDelayToleranceUpdate__Params {
  _event: ExpireDelayToleranceUpdate;

  constructor(event: ExpireDelayToleranceUpdate) {
    this._event = event;
  }

  get expireDelayTolerance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Purchase extends ethereum.Event {
  get params(): Purchase__Params {
    return new Purchase__Params(this);
  }
}

export class Purchase__Params {
  _event: Purchase;

  constructor(event: Purchase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get premium(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class RemoveFromContractWhitelist extends ethereum.Event {
  get params(): RemoveFromContractWhitelist__Params {
    return new RemoveFromContractWhitelist__Params(this);
  }
}

export class RemoveFromContractWhitelist__Params {
  _event: RemoveFromContractWhitelist;

  constructor(event: RemoveFromContractWhitelist) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Settle extends ethereum.Event {
  get params(): Settle__Params {
    return new Settle__Params(this);
  }
}

export class Settle__Params {
  _event: Settle;

  constructor(event: Settle) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralTokenWithdrawn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardTokenWithdrawAmounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class SsovV3__addressesResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }
}

export class SsovV3__epochDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class SsovV3__epochStrikeDataResultLastVaultCheckpointStruct extends ethereum.Tuple {
  get premiumCollectedCumulative(): BigInt {
    return this[0].toBigInt();
  }

  get activeCollateral(): BigInt {
    return this[1].toBigInt();
  }

  get totalCollateral(): BigInt {
    return this[2].toBigInt();
  }

  get activeCollateralRatio(): BigInt {
    return this[3].toBigInt();
  }

  get premiumDistributionRatio(): BigInt {
    return this[4].toBigInt();
  }

  get rewardDistributionRatios(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class SsovV3__epochStrikeDataResult {
  value0: Address;
  value1: SsovV3__epochStrikeDataResultLastVaultCheckpointStruct;

  constructor(
    value0: Address,
    value1: SsovV3__epochStrikeDataResultLastVaultCheckpointStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }
}

export class SsovV3__getEpochDataResultValue0Struct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get settlementPrice(): BigInt {
    return this[2].toBigInt();
  }

  get totalCollateralBalance(): BigInt {
    return this[3].toBigInt();
  }

  get collateralExchangeRate(): BigInt {
    return this[4].toBigInt();
  }

  get totalRewardsCollected(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get rewardDistributionRatios(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get rewardTokensToDistribute(): Array<Address> {
    return this[7].toAddressArray();
  }

  get strikes(): Array<BigInt> {
    return this[8].toBigIntArray();
  }

  get expired(): boolean {
    return this[9].toBoolean();
  }
}

export class SsovV3__getEpochStrikeDataResultValue0Struct extends ethereum.Tuple {
  get strikeToken(): Address {
    return this[0].toAddress();
  }

  get lastVaultCheckpoint(): SsovV3__getEpochStrikeDataResultValue0LastVaultCheckpointStruct {
    return changetype<
      SsovV3__getEpochStrikeDataResultValue0LastVaultCheckpointStruct
    >(this[1].toTuple());
  }

  get rewardsStoredForPremiums(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get rewardsDistributionRatiosForPremiums(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class SsovV3__getEpochStrikeDataResultValue0LastVaultCheckpointStruct extends ethereum.Tuple {
  get premiumCollectedCumulative(): BigInt {
    return this[0].toBigInt();
  }

  get activeCollateral(): BigInt {
    return this[1].toBigInt();
  }

  get totalCollateral(): BigInt {
    return this[2].toBigInt();
  }

  get activeCollateralRatio(): BigInt {
    return this[3].toBigInt();
  }

  get premiumDistributionRatio(): BigInt {
    return this[4].toBigInt();
  }

  get rewardDistributionRatios(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class SsovV3__getEpochTimesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SsovV3__purchaseResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SsovV3__withdrawResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SsovV3__writePositionResultVaultCheckpointStruct extends ethereum.Tuple {
  get premiumCollectedCumulative(): BigInt {
    return this[0].toBigInt();
  }

  get activeCollateral(): BigInt {
    return this[1].toBigInt();
  }

  get totalCollateral(): BigInt {
    return this[2].toBigInt();
  }

  get activeCollateralRatio(): BigInt {
    return this[3].toBigInt();
  }

  get premiumDistributionRatio(): BigInt {
    return this[4].toBigInt();
  }

  get rewardDistributionRatios(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class SsovV3__writePositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: SsovV3__writePositionResultVaultCheckpointStruct;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: SsovV3__writePositionResultVaultCheckpointStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromTuple(this.value3));
    return map;
  }
}

export class SsovV3 extends ethereum.SmartContract {
  static bind(address: Address): SsovV3 {
    return new SsovV3("SsovV3", address);
  }

  addresses(): SsovV3__addressesResult {
    let result = super.call(
      "addresses",
      "addresses():(address,address,address,address,address,address,address)",
      []
    );

    return new SsovV3__addressesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toAddress()
    );
  }

  try_addresses(): ethereum.CallResult<SsovV3__addressesResult> {
    let result = super.tryCall(
      "addresses",
      "addresses():(address,address,address,address,address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__addressesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toAddress()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePnl(price: BigInt, strike: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "calculatePnl",
      "calculatePnl(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePnl(
    price: BigInt,
    strike: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePnl",
      "calculatePnl(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePremium(_strike: BigInt, _amount: BigInt, _expiry: BigInt): BigInt {
    let result = super.call(
      "calculatePremium",
      "calculatePremium(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_strike),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePremium(
    _strike: BigInt,
    _amount: BigInt,
    _expiry: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePremium",
      "calculatePremium(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_strike),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePurchaseFees(strike: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "calculatePurchaseFees",
      "calculatePurchaseFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePurchaseFees(
    strike: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePurchaseFees",
      "calculatePurchaseFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSettlementFees(pnl: BigInt): BigInt {
    let result = super.call(
      "calculateSettlementFees",
      "calculateSettlementFees(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(pnl)]
    );

    return result[0].toBigInt();
  }

  try_calculateSettlementFees(pnl: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSettlementFees",
      "calculateSettlementFees(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(pnl)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralPrecision(): BigInt {
    let result = super.call(
      "collateralPrecision",
      "collateralPrecision():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralPrecision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralPrecision",
      "collateralPrecision():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralToken(): Address {
    let result = super.call(
      "collateralToken",
      "collateralToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralToken",
      "collateralToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(strikeIndex: BigInt, amount: BigInt, user: Address): BigInt {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigInt();
  }

  try_deposit(
    strikeIndex: BigInt,
    amount: BigInt,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyWithdraw(tokens: Array<Address>, transferNative: boolean): boolean {
    let result = super.call(
      "emergencyWithdraw",
      "emergencyWithdraw(address[],bool):(bool)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(transferNative)
      ]
    );

    return result[0].toBoolean();
  }

  try_emergencyWithdraw(
    tokens: Array<Address>,
    transferNative: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyWithdraw",
      "emergencyWithdraw(address[],bool):(bool)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(transferNative)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  epochData(param0: BigInt): SsovV3__epochDataResult {
    let result = super.call(
      "epochData",
      "epochData(uint256):(uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SsovV3__epochDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_epochData(param0: BigInt): ethereum.CallResult<SsovV3__epochDataResult> {
    let result = super.tryCall(
      "epochData",
      "epochData(uint256):(uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__epochDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  epochStrikeData(
    param0: BigInt,
    param1: BigInt
  ): SsovV3__epochStrikeDataResult {
    let result = super.call(
      "epochStrikeData",
      "epochStrikeData(uint256,uint256):(address,(uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new SsovV3__epochStrikeDataResult(
      result[0].toAddress(),
      changetype<SsovV3__epochStrikeDataResultLastVaultCheckpointStruct>(
        result[1].toTuple()
      )
    );
  }

  try_epochStrikeData(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<SsovV3__epochStrikeDataResult> {
    let result = super.tryCall(
      "epochStrikeData",
      "epochStrikeData(uint256,uint256):(address,(uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__epochStrikeDataResult(
        value[0].toAddress(),
        changetype<SsovV3__epochStrikeDataResultLastVaultCheckpointStruct>(
          value[1].toTuple()
        )
      )
    );
  }

  expireDelayTolerance(): BigInt {
    let result = super.call(
      "expireDelayTolerance",
      "expireDelayTolerance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_expireDelayTolerance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expireDelayTolerance",
      "expireDelayTolerance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateralPrice(): BigInt {
    let result = super.call(
      "getCollateralPrice",
      "getCollateralPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCollateralPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralPrice",
      "getCollateralPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochData(epoch: BigInt): SsovV3__getEpochDataResultValue0Struct {
    let result = super.call(
      "getEpochData",
      "getEpochData(uint256):((uint256,uint256,uint256,uint256,uint256,uint256[],uint256[],address[],uint256[],bool))",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return changetype<SsovV3__getEpochDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getEpochData(
    epoch: BigInt
  ): ethereum.CallResult<SsovV3__getEpochDataResultValue0Struct> {
    let result = super.tryCall(
      "getEpochData",
      "getEpochData(uint256):((uint256,uint256,uint256,uint256,uint256,uint256[],uint256[],address[],uint256[],bool))",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SsovV3__getEpochDataResultValue0Struct>(value[0].toTuple())
    );
  }

  getEpochStrikeData(
    epoch: BigInt,
    strike: BigInt
  ): SsovV3__getEpochStrikeDataResultValue0Struct {
    let result = super.call(
      "getEpochStrikeData",
      "getEpochStrikeData(uint256,uint256):((address,(uint256,uint256,uint256,uint256,uint256,uint256[]),uint256[],uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(strike)
      ]
    );

    return changetype<SsovV3__getEpochStrikeDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getEpochStrikeData(
    epoch: BigInt,
    strike: BigInt
  ): ethereum.CallResult<SsovV3__getEpochStrikeDataResultValue0Struct> {
    let result = super.tryCall(
      "getEpochStrikeData",
      "getEpochStrikeData(uint256,uint256):((address,(uint256,uint256,uint256,uint256,uint256,uint256[]),uint256[],uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(strike)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SsovV3__getEpochStrikeDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getEpochStrikes(epoch: BigInt): Array<BigInt> {
    let result = super.call(
      "getEpochStrikes",
      "getEpochStrikes(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigIntArray();
  }

  try_getEpochStrikes(epoch: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getEpochStrikes",
      "getEpochStrikes(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getEpochTimes(epoch: BigInt): SsovV3__getEpochTimesResult {
    let result = super.call(
      "getEpochTimes",
      "getEpochTimes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return new SsovV3__getEpochTimesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getEpochTimes(
    epoch: BigInt
  ): ethereum.CallResult<SsovV3__getEpochTimesResult> {
    let result = super.tryCall(
      "getEpochTimes",
      "getEpochTimes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__getEpochTimesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getUnderlyingPrice(): BigInt {
    let result = super.call(
      "getUnderlyingPrice",
      "getUnderlyingPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingPrice",
      "getUnderlyingPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVolatility(_strike: BigInt): BigInt {
    let result = super.call(
      "getVolatility",
      "getVolatility(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_strike)]
    );

    return result[0].toBigInt();
  }

  try_getVolatility(_strike: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVolatility",
      "getVolatility(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_strike)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isContract(addr: Address): boolean {
    let result = super.call("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isContract(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPut(): boolean {
    let result = super.call("isPut", "isPut():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPut(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPut", "isPut():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  purchase(
    strikeIndex: BigInt,
    amount: BigInt,
    user: Address
  ): SsovV3__purchaseResult {
    let result = super.call(
      "purchase",
      "purchase(uint256,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new SsovV3__purchaseResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_purchase(
    strikeIndex: BigInt,
    amount: BigInt,
    user: Address
  ): ethereum.CallResult<SsovV3__purchaseResult> {
    let result = super.tryCall(
      "purchase",
      "purchase(uint256,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__purchaseResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  settle(strikeIndex: BigInt, amount: BigInt, epoch: BigInt): BigInt {
    let result = super.call(
      "settle",
      "settle(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(epoch)
      ]
    );

    return result[0].toBigInt();
  }

  try_settle(
    strikeIndex: BigInt,
    amount: BigInt,
    epoch: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settle",
      "settle(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(epoch)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingSymbol(): string {
    let result = super.call(
      "underlyingSymbol",
      "underlyingSymbol():(string)",
      []
    );

    return result[0].toString();
  }

  try_underlyingSymbol(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "underlyingSymbol",
      "underlyingSymbol():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  whitelistedContracts(param0: Address): boolean {
    let result = super.call(
      "whitelistedContracts",
      "whitelistedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whitelistedContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedContracts",
      "whitelistedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(tokenId: BigInt, to: Address): SsovV3__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address):(uint256,uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(to)
      ]
    );

    return new SsovV3__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_withdraw(
    tokenId: BigInt,
    to: Address
  ): ethereum.CallResult<SsovV3__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address):(uint256,uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__withdrawResult(value[0].toBigInt(), value[1].toBigIntArray())
    );
  }

  writePosition(tokenId: BigInt): SsovV3__writePositionResult {
    let result = super.call(
      "writePosition",
      "writePosition(uint256):(uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new SsovV3__writePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      changetype<SsovV3__writePositionResultVaultCheckpointStruct>(
        result[3].toTuple()
      )
    );
  }

  try_writePosition(
    tokenId: BigInt
  ): ethereum.CallResult<SsovV3__writePositionResult> {
    let result = super.tryCall(
      "writePosition",
      "writePosition(uint256):(uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SsovV3__writePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        changetype<SsovV3__writePositionResultVaultCheckpointStruct>(
          value[3].toTuple()
        )
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _underlyingSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _isPut(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToContractWhitelistCall extends ethereum.Call {
  get inputs(): AddToContractWhitelistCall__Inputs {
    return new AddToContractWhitelistCall__Inputs(this);
  }

  get outputs(): AddToContractWhitelistCall__Outputs {
    return new AddToContractWhitelistCall__Outputs(this);
  }
}

export class AddToContractWhitelistCall__Inputs {
  _call: AddToContractWhitelistCall;

  constructor(call: AddToContractWhitelistCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToContractWhitelistCall__Outputs {
  _call: AddToContractWhitelistCall;

  constructor(call: AddToContractWhitelistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BootstrapCall extends ethereum.Call {
  get inputs(): BootstrapCall__Inputs {
    return new BootstrapCall__Inputs(this);
  }

  get outputs(): BootstrapCall__Outputs {
    return new BootstrapCall__Outputs(this);
  }
}

export class BootstrapCall__Inputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }

  get strikes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expirySymbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class BootstrapCall__Outputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangeAllowanceForStakingStrategyCall extends ethereum.Call {
  get inputs(): ChangeAllowanceForStakingStrategyCall__Inputs {
    return new ChangeAllowanceForStakingStrategyCall__Inputs(this);
  }

  get outputs(): ChangeAllowanceForStakingStrategyCall__Outputs {
    return new ChangeAllowanceForStakingStrategyCall__Outputs(this);
  }
}

export class ChangeAllowanceForStakingStrategyCall__Inputs {
  _call: ChangeAllowanceForStakingStrategyCall;

  constructor(call: ChangeAllowanceForStakingStrategyCall) {
    this._call = call;
  }

  get _increase(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _allowance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeAllowanceForStakingStrategyCall__Outputs {
  _call: ChangeAllowanceForStakingStrategyCall;

  constructor(call: ChangeAllowanceForStakingStrategyCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get transferNative(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExpireCall extends ethereum.Call {
  get inputs(): ExpireCall__Inputs {
    return new ExpireCall__Inputs(this);
  }

  get outputs(): ExpireCall__Outputs {
    return new ExpireCall__Outputs(this);
  }
}

export class ExpireCall__Inputs {
  _call: ExpireCall;

  constructor(call: ExpireCall) {
    this._call = call;
  }
}

export class ExpireCall__Outputs {
  _call: ExpireCall;

  constructor(call: ExpireCall) {
    this._call = call;
  }
}

export class Expire1Call extends ethereum.Call {
  get inputs(): Expire1Call__Inputs {
    return new Expire1Call__Inputs(this);
  }

  get outputs(): Expire1Call__Outputs {
    return new Expire1Call__Outputs(this);
  }
}

export class Expire1Call__Inputs {
  _call: Expire1Call;

  constructor(call: Expire1Call) {
    this._call = call;
  }

  get _settlementPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Expire1Call__Outputs {
  _call: Expire1Call;

  constructor(call: Expire1Call) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get premium(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get totalFee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveFromContractWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromContractWhitelistCall__Inputs {
    return new RemoveFromContractWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromContractWhitelistCall__Outputs {
    return new RemoveFromContractWhitelistCall__Outputs(this);
  }
}

export class RemoveFromContractWhitelistCall__Inputs {
  _call: RemoveFromContractWhitelistCall;

  constructor(call: RemoveFromContractWhitelistCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromContractWhitelistCall__Outputs {
  _call: RemoveFromContractWhitelistCall;

  constructor(call: RemoveFromContractWhitelistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _addresses(): SetAddressesCall_addressesStruct {
    return changetype<SetAddressesCall_addressesStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetAddressesCall_addressesStruct extends ethereum.Tuple {
  get feeStrategy(): Address {
    return this[0].toAddress();
  }

  get stakingStrategy(): Address {
    return this[1].toAddress();
  }

  get optionPricing(): Address {
    return this[2].toAddress();
  }

  get priceOracle(): Address {
    return this[3].toAddress();
  }

  get volatilityOracle(): Address {
    return this[4].toAddress();
  }

  get feeDistributor(): Address {
    return this[5].toAddress();
  }

  get optionsTokenImplementation(): Address {
    return this[6].toAddress();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get epoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get pnl(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateExpireDelayToleranceCall extends ethereum.Call {
  get inputs(): UpdateExpireDelayToleranceCall__Inputs {
    return new UpdateExpireDelayToleranceCall__Inputs(this);
  }

  get outputs(): UpdateExpireDelayToleranceCall__Outputs {
    return new UpdateExpireDelayToleranceCall__Outputs(this);
  }
}

export class UpdateExpireDelayToleranceCall__Inputs {
  _call: UpdateExpireDelayToleranceCall;

  constructor(call: UpdateExpireDelayToleranceCall) {
    this._call = call;
  }

  get _expireDelayTolerance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateExpireDelayToleranceCall__Outputs {
  _call: UpdateExpireDelayToleranceCall;

  constructor(call: UpdateExpireDelayToleranceCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get collateralTokenWithdrawAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get rewardTokenWithdrawAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}
