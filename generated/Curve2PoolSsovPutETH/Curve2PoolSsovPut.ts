// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddToContractWhitelist extends ethereum.Event {
  get params(): AddToContractWhitelist__Params {
    return new AddToContractWhitelist__Params(this);
  }
}

export class AddToContractWhitelist__Params {
  _event: AddToContractWhitelist;

  constructor(event: AddToContractWhitelist) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddressSet extends ethereum.Event {
  get params(): AddressSet__Params {
    return new AddressSet__Params(this);
  }
}

export class AddressSet__Params {
  _event: AddressSet;

  constructor(event: AddressSet) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Bootstrap extends ethereum.Event {
  get params(): Bootstrap__Params {
    return new Bootstrap__Params(this);
  }
}

export class Bootstrap__Params {
  _event: Bootstrap;

  constructor(event: Bootstrap) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Compound extends ethereum.Event {
  get params(): Compound__Params {
    return new Compound__Params(this);
  }
}

export class Compound__Params {
  _event: Compound;

  constructor(event: Compound) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewards(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EpochExpired extends ethereum.Event {
  get params(): EpochExpired__Params {
    return new EpochExpired__Params(this);
  }
}

export class EpochExpired__Params {
  _event: EpochExpired;

  constructor(event: EpochExpired) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settlementPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExpireDelayToleranceUpdate extends ethereum.Event {
  get params(): ExpireDelayToleranceUpdate__Params {
    return new ExpireDelayToleranceUpdate__Params(this);
  }
}

export class ExpireDelayToleranceUpdate__Params {
  _event: ExpireDelayToleranceUpdate;

  constructor(event: ExpireDelayToleranceUpdate) {
    this._event = event;
  }

  get expireDelayTolerance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Purchase extends ethereum.Event {
  get params(): Purchase__Params {
    return new Purchase__Params(this);
  }
}

export class Purchase__Params {
  _event: Purchase;

  constructor(event: Purchase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get premium(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class RemoveFromContractWhitelist extends ethereum.Event {
  get params(): RemoveFromContractWhitelist__Params {
    return new RemoveFromContractWhitelist__Params(this);
  }
}

export class RemoveFromContractWhitelist__Params {
  _event: RemoveFromContractWhitelist;

  constructor(event: RemoveFromContractWhitelist) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Settle extends ethereum.Event {
  get params(): Settle__Params {
    return new Settle__Params(this);
  }
}

export class Settle__Params {
  _event: Settle;

  constructor(event: Settle) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StrikeSet extends ethereum.Event {
  get params(): StrikeSet__Params {
    return new StrikeSet__Params(this);
  }
}

export class StrikeSet__Params {
  _event: StrikeSet;

  constructor(event: StrikeSet) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WindowSizeUpdate extends ethereum.Event {
  get params(): WindowSizeUpdate__Params {
    return new WindowSizeUpdate__Params(this);
  }
}

export class WindowSizeUpdate__Params {
  _event: WindowSizeUpdate;

  constructor(event: WindowSizeUpdate) {
    this._event = event;
  }

  get windowSizeInHours(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strike(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get userDeposits(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get quoteTokenWithdrawn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get crvRewards(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Curve2PoolSsovPut__getEpochTimesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Curve2PoolSsovPut__purchaseResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Curve2PoolSsovPut extends ethereum.SmartContract {
  static bind(address: Address): Curve2PoolSsovPut {
    return new Curve2PoolSsovPut("Curve2PoolSsovPut", address);
  }

  addToContractWhitelist(_contract: Address): boolean {
    let result = super.call(
      "addToContractWhitelist",
      "addToContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBoolean();
  }

  try_addToContractWhitelist(_contract: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addToContractWhitelist",
      "addToContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addresses(param0: Bytes): Address {
    let result = super.call("addresses", "addresses(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_addresses(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("addresses", "addresses(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseToken(): Address {
    let result = super.call("baseToken", "baseToken():(address)", []);

    return result[0].toAddress();
  }

  try_baseToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("baseToken", "baseToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bootstrap(): boolean {
    let result = super.call("bootstrap", "bootstrap():(bool)", []);

    return result[0].toBoolean();
  }

  try_bootstrap(): ethereum.CallResult<boolean> {
    let result = super.tryCall("bootstrap", "bootstrap():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculatePnl(price: BigInt, strike: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "calculatePnl",
      "calculatePnl(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePnl(
    price: BigInt,
    strike: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePnl",
      "calculatePnl(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePremium(_strike: BigInt, _amount: BigInt): BigInt {
    let result = super.call(
      "calculatePremium",
      "calculatePremium(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_strike),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePremium(
    _strike: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePremium",
      "calculatePremium(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_strike),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePurchaseFees(price: BigInt, strike: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "calculatePurchaseFees",
      "calculatePurchaseFees(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePurchaseFees(
    price: BigInt,
    strike: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePurchaseFees",
      "calculatePurchaseFees(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSettlementFees(
    settlementPrice: BigInt,
    pnl: BigInt,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "calculateSettlementFees",
      "calculateSettlementFees(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(settlementPrice),
        ethereum.Value.fromUnsignedBigInt(pnl),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateSettlementFees(
    settlementPrice: BigInt,
    pnl: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSettlementFees",
      "calculateSettlementFees(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(settlementPrice),
        ethereum.Value.fromUnsignedBigInt(pnl),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  crvToDistribute(param0: BigInt): BigInt {
    let result = super.call(
      "crvToDistribute",
      "crvToDistribute(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_crvToDistribute(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "crvToDistribute",
      "crvToDistribute(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(strikeIndex: BigInt, amount: BigInt, user: Address): boolean {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBoolean();
  }

  try_deposit(
    strikeIndex: BigInt,
    amount: BigInt,
    user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositMultiple(
    strikeIndices: Array<BigInt>,
    amounts: Array<BigInt>,
    user: Address
  ): boolean {
    let result = super.call(
      "depositMultiple",
      "depositMultiple(uint256[],uint256[],address):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(strikeIndices),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBoolean();
  }

  try_depositMultiple(
    strikeIndices: Array<BigInt>,
    amounts: Array<BigInt>,
    user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositMultiple",
      "depositMultiple(uint256[],uint256[],address):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(strikeIndices),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  emergencyWithdraw(tokens: Array<Address>, transferNative: boolean): boolean {
    let result = super.call(
      "emergencyWithdraw",
      "emergencyWithdraw(address[],bool):(bool)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(transferNative)
      ]
    );

    return result[0].toBoolean();
  }

  try_emergencyWithdraw(
    tokens: Array<Address>,
    transferNative: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyWithdraw",
      "emergencyWithdraw(address[],bool):(bool)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(transferNative)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  epochBalanceAfterUnstaking(param0: BigInt): BigInt {
    let result = super.call(
      "epochBalanceAfterUnstaking",
      "epochBalanceAfterUnstaking(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_epochBalanceAfterUnstaking(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochBalanceAfterUnstaking",
      "epochBalanceAfterUnstaking(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochStartTimes(param0: BigInt): BigInt {
    let result = super.call(
      "epochStartTimes",
      "epochStartTimes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_epochStartTimes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochStartTimes",
      "epochStartTimes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochStrikeTokens(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "epochStrikeTokens",
      "epochStrikeTokens(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_epochStrikeTokens(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "epochStrikeTokens",
      "epochStrikeTokens(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epochStrikes(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "epochStrikes",
      "epochStrikes(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_epochStrikes(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochStrikes",
      "epochStrikes(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expireDelayTolerance(): BigInt {
    let result = super.call(
      "expireDelayTolerance",
      "expireDelayTolerance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_expireDelayTolerance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expireDelayTolerance",
      "expireDelayTolerance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expireEpoch(): boolean {
    let result = super.call("expireEpoch", "expireEpoch():(bool)", []);

    return result[0].toBoolean();
  }

  try_expireEpoch(): ethereum.CallResult<boolean> {
    let result = super.tryCall("expireEpoch", "expireEpoch():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expireEpoch1(settlementPrice: BigInt): boolean {
    let result = super.call("expireEpoch", "expireEpoch(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(settlementPrice)
    ]);

    return result[0].toBoolean();
  }

  try_expireEpoch1(settlementPrice: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("expireEpoch", "expireEpoch(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(settlementPrice)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  finalQuoteTokenBalancePerStrike(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "finalQuoteTokenBalancePerStrike",
      "finalQuoteTokenBalancePerStrike(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_finalQuoteTokenBalancePerStrike(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "finalQuoteTokenBalancePerStrike",
      "finalQuoteTokenBalancePerStrike(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAddress(name: Bytes): Address {
    let result = super.call("getAddress", "getAddress(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(name)
    ]);

    return result[0].toAddress();
  }

  try_getAddress(name: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getAddress", "getAddress(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEpochStrikeTokens(epoch: BigInt): Array<Address> {
    let result = super.call(
      "getEpochStrikeTokens",
      "getEpochStrikeTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toAddressArray();
  }

  try_getEpochStrikeTokens(epoch: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getEpochStrikeTokens",
      "getEpochStrikeTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getEpochStrikes(epoch: BigInt): Array<BigInt> {
    let result = super.call(
      "getEpochStrikes",
      "getEpochStrikes(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigIntArray();
  }

  try_getEpochStrikes(epoch: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getEpochStrikes",
      "getEpochStrikes(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getEpochTimes(epoch: BigInt): Curve2PoolSsovPut__getEpochTimesResult {
    let result = super.call(
      "getEpochTimes",
      "getEpochTimes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return new Curve2PoolSsovPut__getEpochTimesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getEpochTimes(
    epoch: BigInt
  ): ethereum.CallResult<Curve2PoolSsovPut__getEpochTimesResult> {
    let result = super.tryCall(
      "getEpochTimes",
      "getEpochTimes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Curve2PoolSsovPut__getEpochTimesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getLpPrice(): BigInt {
    let result = super.call("getLpPrice", "getLpPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLpPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLpPrice", "getLpPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMonthlyExpiryFromTimestamp(timestamp: BigInt): BigInt {
    let result = super.call(
      "getMonthlyExpiryFromTimestamp",
      "getMonthlyExpiryFromTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_getMonthlyExpiryFromTimestamp(
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMonthlyExpiryFromTimestamp",
      "getMonthlyExpiryFromTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalEpochPutsPurchased(epoch: BigInt): Array<BigInt> {
    let result = super.call(
      "getTotalEpochPutsPurchased",
      "getTotalEpochPutsPurchased(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigIntArray();
  }

  try_getTotalEpochPutsPurchased(
    epoch: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTotalEpochPutsPurchased",
      "getTotalEpochPutsPurchased(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTotalEpochStrikeDeposits(epoch: BigInt): Array<BigInt> {
    let result = super.call(
      "getTotalEpochStrikeDeposits",
      "getTotalEpochStrikeDeposits(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigIntArray();
  }

  try_getTotalEpochStrikeDeposits(
    epoch: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTotalEpochStrikeDeposits",
      "getTotalEpochStrikeDeposits(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUsdPrice(): BigInt {
    let result = super.call("getUsdPrice", "getUsdPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getUsdPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getUsdPrice", "getUsdPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserEpochDeposits(epoch: BigInt, user: Address): Array<BigInt> {
    let result = super.call(
      "getUserEpochDeposits",
      "getUserEpochDeposits(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getUserEpochDeposits(
    epoch: BigInt,
    user: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserEpochDeposits",
      "getUserEpochDeposits(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserEpochPremium(epoch: BigInt, user: Address): Array<BigInt> {
    let result = super.call(
      "getUserEpochPremium",
      "getUserEpochPremium(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getUserEpochPremium(
    epoch: BigInt,
    user: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserEpochPremium",
      "getUserEpochPremium(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserEpochPutsPurchased(epoch: BigInt, user: Address): Array<BigInt> {
    let result = super.call(
      "getUserEpochPutsPurchased",
      "getUserEpochPutsPurchased(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getUserEpochPutsPurchased(
    epoch: BigInt,
    user: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserEpochPutsPurchased",
      "getUserEpochPutsPurchased(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getVolatility(_strike: BigInt): BigInt {
    let result = super.call(
      "getVolatility",
      "getVolatility(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_strike)]
    );

    return result[0].toBigInt();
  }

  try_getVolatility(_strike: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVolatility",
      "getVolatility(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_strike)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isContract(addr: Address): boolean {
    let result = super.call("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isContract(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEpochExpired(param0: BigInt): boolean {
    let result = super.call(
      "isEpochExpired",
      "isEpochExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isEpochExpired(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEpochExpired",
      "isEpochExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVaultReady(param0: BigInt): boolean {
    let result = super.call("isVaultReady", "isVaultReady(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isVaultReady(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isVaultReady", "isVaultReady(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  optionsTokenImplementation(): Address {
    let result = super.call(
      "optionsTokenImplementation",
      "optionsTokenImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_optionsTokenImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "optionsTokenImplementation",
      "optionsTokenImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pause(): boolean {
    let result = super.call("pause", "pause():(bool)", []);

    return result[0].toBoolean();
  }

  try_pause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pause", "pause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  purchase(
    strikeIndex: BigInt,
    amount: BigInt,
    user: Address
  ): Curve2PoolSsovPut__purchaseResult {
    let result = super.call(
      "purchase",
      "purchase(uint256,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new Curve2PoolSsovPut__purchaseResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_purchase(
    strikeIndex: BigInt,
    amount: BigInt,
    user: Address
  ): ethereum.CallResult<Curve2PoolSsovPut__purchaseResult> {
    let result = super.tryCall(
      "purchase",
      "purchase(uint256,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Curve2PoolSsovPut__purchaseResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  quoteToken(): Address {
    let result = super.call("quoteToken", "quoteToken():(address)", []);

    return result[0].toAddress();
  }

  try_quoteToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("quoteToken", "quoteToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeFromContractWhitelist(_contract: Address): boolean {
    let result = super.call(
      "removeFromContractWhitelist",
      "removeFromContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBoolean();
  }

  try_removeFromContractWhitelist(
    _contract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeFromContractWhitelist",
      "removeFromContractWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setAddresses(names: Array<Bytes>, destinations: Array<Address>): boolean {
    let result = super.call(
      "setAddresses",
      "setAddresses(bytes32[],address[]):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(names),
        ethereum.Value.fromAddressArray(destinations)
      ]
    );

    return result[0].toBoolean();
  }

  try_setAddresses(
    names: Array<Bytes>,
    destinations: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setAddresses",
      "setAddresses(bytes32[],address[]):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(names),
        ethereum.Value.fromAddressArray(destinations)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setStrikes(strikes: Array<BigInt>): boolean {
    let result = super.call("setStrikes", "setStrikes(uint256[]):(bool)", [
      ethereum.Value.fromUnsignedBigIntArray(strikes)
    ]);

    return result[0].toBoolean();
  }

  try_setStrikes(strikes: Array<BigInt>): ethereum.CallResult<boolean> {
    let result = super.tryCall("setStrikes", "setStrikes(uint256[]):(bool)", [
      ethereum.Value.fromUnsignedBigIntArray(strikes)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  settle(strikeIndex: BigInt, amount: BigInt, epoch: BigInt): BigInt {
    let result = super.call(
      "settle",
      "settle(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(epoch)
      ]
    );

    return result[0].toBigInt();
  }

  try_settle(
    strikeIndex: BigInt,
    amount: BigInt,
    epoch: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settle",
      "settle(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(epoch)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settlementPrices(param0: BigInt): BigInt {
    let result = super.call(
      "settlementPrices",
      "settlementPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_settlementPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settlementPrices",
      "settlementPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEpochDeposits(param0: BigInt): BigInt {
    let result = super.call(
      "totalEpochDeposits",
      "totalEpochDeposits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalEpochDeposits(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEpochDeposits",
      "totalEpochDeposits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEpochPremium(param0: BigInt): BigInt {
    let result = super.call(
      "totalEpochPremium",
      "totalEpochPremium(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalEpochPremium(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEpochPremium",
      "totalEpochPremium(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEpochPutsPurchased(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "totalEpochPutsPurchased",
      "totalEpochPutsPurchased(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalEpochPutsPurchased(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEpochPutsPurchased",
      "totalEpochPutsPurchased(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEpochStrikeDeposits(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "totalEpochStrikeDeposits",
      "totalEpochStrikeDeposits(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalEpochStrikeDeposits(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEpochStrikeDeposits",
      "totalEpochStrikeDeposits(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEpochStrikePremium(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "totalEpochStrikePremium",
      "totalEpochStrikePremium(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalEpochStrikePremium(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEpochStrikePremium",
      "totalEpochStrikePremium(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unpause(): boolean {
    let result = super.call("unpause", "unpause():(bool)", []);

    return result[0].toBoolean();
  }

  try_unpause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("unpause", "unpause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateExpireDelayTolerance(_expireDelayTolerance: BigInt): boolean {
    let result = super.call(
      "updateExpireDelayTolerance",
      "updateExpireDelayTolerance(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_expireDelayTolerance)]
    );

    return result[0].toBoolean();
  }

  try_updateExpireDelayTolerance(
    _expireDelayTolerance: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateExpireDelayTolerance",
      "updateExpireDelayTolerance(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_expireDelayTolerance)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userEpochDeposits(param0: BigInt, param1: Bytes): BigInt {
    let result = super.call(
      "userEpochDeposits",
      "userEpochDeposits(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userEpochDeposits(
    param0: BigInt,
    param1: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userEpochDeposits",
      "userEpochDeposits(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userEpochPremium(param0: BigInt, param1: Bytes): BigInt {
    let result = super.call(
      "userEpochPremium",
      "userEpochPremium(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userEpochPremium(
    param0: BigInt,
    param1: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userEpochPremium",
      "userEpochPremium(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userEpochPutsPurchased(param0: BigInt, param1: Bytes): BigInt {
    let result = super.call(
      "userEpochPutsPurchased",
      "userEpochPutsPurchased(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userEpochPutsPurchased(
    param0: BigInt,
    param1: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userEpochPutsPurchased",
      "userEpochPutsPurchased(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistedContracts(param0: Address): boolean {
    let result = super.call(
      "whitelistedContracts",
      "whitelistedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whitelistedContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedContracts",
      "whitelistedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(epoch: BigInt, strikeIndex: BigInt): Array<BigInt> {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,uint256):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(strikeIndex)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_withdraw(
    epoch: BigInt,
    strikeIndex: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(strikeIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  withdrawSpecificCoin(
    epoch: BigInt,
    strikeIndex: BigInt,
    minAmount: BigInt,
    coinIndex: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "withdrawSpecificCoin",
      "withdrawSpecificCoin(uint256,uint256,uint256,int256):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(minAmount),
        ethereum.Value.fromSignedBigInt(coinIndex)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_withdrawSpecificCoin(
    epoch: BigInt,
    strikeIndex: BigInt,
    minAmount: BigInt,
    coinIndex: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "withdrawSpecificCoin",
      "withdrawSpecificCoin(uint256,uint256,uint256,int256):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(strikeIndex),
        ethereum.Value.fromUnsignedBigInt(minAmount),
        ethereum.Value.fromSignedBigInt(coinIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get sources(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get destinations(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _quoteToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _baseToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToContractWhitelistCall extends ethereum.Call {
  get inputs(): AddToContractWhitelistCall__Inputs {
    return new AddToContractWhitelistCall__Inputs(this);
  }

  get outputs(): AddToContractWhitelistCall__Outputs {
    return new AddToContractWhitelistCall__Outputs(this);
  }
}

export class AddToContractWhitelistCall__Inputs {
  _call: AddToContractWhitelistCall;

  constructor(call: AddToContractWhitelistCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToContractWhitelistCall__Outputs {
  _call: AddToContractWhitelistCall;

  constructor(call: AddToContractWhitelistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BootstrapCall extends ethereum.Call {
  get inputs(): BootstrapCall__Inputs {
    return new BootstrapCall__Inputs(this);
  }

  get outputs(): BootstrapCall__Outputs {
    return new BootstrapCall__Outputs(this);
  }
}

export class BootstrapCall__Inputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }
}

export class BootstrapCall__Outputs {
  _call: BootstrapCall;

  constructor(call: BootstrapCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositMultipleCall extends ethereum.Call {
  get inputs(): DepositMultipleCall__Inputs {
    return new DepositMultipleCall__Inputs(this);
  }

  get outputs(): DepositMultipleCall__Outputs {
    return new DepositMultipleCall__Outputs(this);
  }
}

export class DepositMultipleCall__Inputs {
  _call: DepositMultipleCall;

  constructor(call: DepositMultipleCall) {
    this._call = call;
  }

  get strikeIndices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositMultipleCall__Outputs {
  _call: DepositMultipleCall;

  constructor(call: DepositMultipleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get transferNative(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExpireEpochCall extends ethereum.Call {
  get inputs(): ExpireEpochCall__Inputs {
    return new ExpireEpochCall__Inputs(this);
  }

  get outputs(): ExpireEpochCall__Outputs {
    return new ExpireEpochCall__Outputs(this);
  }
}

export class ExpireEpochCall__Inputs {
  _call: ExpireEpochCall;

  constructor(call: ExpireEpochCall) {
    this._call = call;
  }
}

export class ExpireEpochCall__Outputs {
  _call: ExpireEpochCall;

  constructor(call: ExpireEpochCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExpireEpoch1Call extends ethereum.Call {
  get inputs(): ExpireEpoch1Call__Inputs {
    return new ExpireEpoch1Call__Inputs(this);
  }

  get outputs(): ExpireEpoch1Call__Outputs {
    return new ExpireEpoch1Call__Outputs(this);
  }
}

export class ExpireEpoch1Call__Inputs {
  _call: ExpireEpoch1Call;

  constructor(call: ExpireEpoch1Call) {
    this._call = call;
  }

  get settlementPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExpireEpoch1Call__Outputs {
  _call: ExpireEpoch1Call;

  constructor(call: ExpireEpoch1Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveFromContractWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromContractWhitelistCall__Inputs {
    return new RemoveFromContractWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromContractWhitelistCall__Outputs {
    return new RemoveFromContractWhitelistCall__Outputs(this);
  }
}

export class RemoveFromContractWhitelistCall__Inputs {
  _call: RemoveFromContractWhitelistCall;

  constructor(call: RemoveFromContractWhitelistCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromContractWhitelistCall__Outputs {
  _call: RemoveFromContractWhitelistCall;

  constructor(call: RemoveFromContractWhitelistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get names(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get destinations(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetStrikesCall extends ethereum.Call {
  get inputs(): SetStrikesCall__Inputs {
    return new SetStrikesCall__Inputs(this);
  }

  get outputs(): SetStrikesCall__Outputs {
    return new SetStrikesCall__Outputs(this);
  }
}

export class SetStrikesCall__Inputs {
  _call: SetStrikesCall;

  constructor(call: SetStrikesCall) {
    this._call = call;
  }

  get strikes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetStrikesCall__Outputs {
  _call: SetStrikesCall;

  constructor(call: SetStrikesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get epoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get pnl(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateExpireDelayToleranceCall extends ethereum.Call {
  get inputs(): UpdateExpireDelayToleranceCall__Inputs {
    return new UpdateExpireDelayToleranceCall__Inputs(this);
  }

  get outputs(): UpdateExpireDelayToleranceCall__Outputs {
    return new UpdateExpireDelayToleranceCall__Outputs(this);
  }
}

export class UpdateExpireDelayToleranceCall__Inputs {
  _call: UpdateExpireDelayToleranceCall;

  constructor(call: UpdateExpireDelayToleranceCall) {
    this._call = call;
  }

  get _expireDelayTolerance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateExpireDelayToleranceCall__Outputs {
  _call: UpdateExpireDelayToleranceCall;

  constructor(call: UpdateExpireDelayToleranceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get epoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class WithdrawSpecificCoinCall extends ethereum.Call {
  get inputs(): WithdrawSpecificCoinCall__Inputs {
    return new WithdrawSpecificCoinCall__Inputs(this);
  }

  get outputs(): WithdrawSpecificCoinCall__Outputs {
    return new WithdrawSpecificCoinCall__Outputs(this);
  }
}

export class WithdrawSpecificCoinCall__Inputs {
  _call: WithdrawSpecificCoinCall;

  constructor(call: WithdrawSpecificCoinCall) {
    this._call = call;
  }

  get epoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strikeIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get coinIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawSpecificCoinCall__Outputs {
  _call: WithdrawSpecificCoinCall;

  constructor(call: WithdrawSpecificCoinCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
