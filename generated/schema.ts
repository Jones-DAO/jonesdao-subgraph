// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class JAssetMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("asset", Value.fromString(""));
    this.set("JAssetToAssetRatio", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("JAssetPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("AssetPrice", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JAssetMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save JAssetMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("JAssetMetric", id.toString(), this);
    }
  }

  static load(id: string): JAssetMetric | null {
    return changetype<JAssetMetric | null>(store.get("JAssetMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get JAssetToAssetRatio(): BigDecimal {
    let value = this.get("JAssetToAssetRatio");
    return value!.toBigDecimal();
  }

  set JAssetToAssetRatio(value: BigDecimal) {
    this.set("JAssetToAssetRatio", Value.fromBigDecimal(value));
  }

  get JAssetPrice(): BigDecimal {
    let value = this.get("JAssetPrice");
    return value!.toBigDecimal();
  }

  set JAssetPrice(value: BigDecimal) {
    this.set("JAssetPrice", Value.fromBigDecimal(value));
  }

  get AssetPrice(): BigDecimal {
    let value = this.get("AssetPrice");
    return value!.toBigDecimal();
  }

  set AssetPrice(value: BigDecimal) {
    this.set("AssetPrice", Value.fromBigDecimal(value));
  }
}

export class JonesSSOVPurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("asset", Value.fromString(""));
    this.set("optionType", Value.fromString(""));
    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("strikeIndex", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("premium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalFee", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JonesSSOVPurchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save JonesSSOVPurchase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("JonesSSOVPurchase", id.toString(), this);
    }
  }

  static load(id: string): JonesSSOVPurchase | null {
    return changetype<JonesSSOVPurchase | null>(
      store.get("JonesSSOVPurchase", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get optionType(): string {
    let value = this.get("optionType");
    return value!.toString();
  }

  set optionType(value: string) {
    this.set("optionType", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get strikeIndex(): BigInt {
    let value = this.get("strikeIndex");
    return value!.toBigInt();
  }

  set strikeIndex(value: BigInt) {
    this.set("strikeIndex", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get premium(): BigDecimal {
    let value = this.get("premium");
    return value!.toBigDecimal();
  }

  set premium(value: BigDecimal) {
    this.set("premium", Value.fromBigDecimal(value));
  }

  get totalFee(): BigDecimal {
    let value = this.get("totalFee");
    return value!.toBigDecimal();
  }

  set totalFee(value: BigDecimal) {
    this.set("totalFee", Value.fromBigDecimal(value));
  }
}

export class SummedJonesSSOVPurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("asset", Value.fromString(""));
    this.set("optionType", Value.fromString(""));
    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("strikes", Value.fromBigIntArray(new Array(0)));
    this.set("optionsPurchased", Value.fromBigDecimalArray(new Array(0)));
    this.set("premiumsPaid", Value.fromBigDecimalArray(new Array(0)));
    this.set("feesPaid", Value.fromBigDecimalArray(new Array(0)));
    this.set("costToExercise", Value.fromBigDecimalArray(new Array(0)));
    this.set("totalPremiumsPaid", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalFeesPaid", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SummedJonesSSOVPurchase entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SummedJonesSSOVPurchase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SummedJonesSSOVPurchase", id.toString(), this);
    }
  }

  static load(id: string): SummedJonesSSOVPurchase | null {
    return changetype<SummedJonesSSOVPurchase | null>(
      store.get("SummedJonesSSOVPurchase", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get optionType(): string {
    let value = this.get("optionType");
    return value!.toString();
  }

  set optionType(value: string) {
    this.set("optionType", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get strikes(): Array<BigInt> {
    let value = this.get("strikes");
    return value!.toBigIntArray();
  }

  set strikes(value: Array<BigInt>) {
    this.set("strikes", Value.fromBigIntArray(value));
  }

  get optionsPurchased(): Array<BigDecimal> {
    let value = this.get("optionsPurchased");
    return value!.toBigDecimalArray();
  }

  set optionsPurchased(value: Array<BigDecimal>) {
    this.set("optionsPurchased", Value.fromBigDecimalArray(value));
  }

  get premiumsPaid(): Array<BigDecimal> {
    let value = this.get("premiumsPaid");
    return value!.toBigDecimalArray();
  }

  set premiumsPaid(value: Array<BigDecimal>) {
    this.set("premiumsPaid", Value.fromBigDecimalArray(value));
  }

  get feesPaid(): Array<BigDecimal> {
    let value = this.get("feesPaid");
    return value!.toBigDecimalArray();
  }

  set feesPaid(value: Array<BigDecimal>) {
    this.set("feesPaid", Value.fromBigDecimalArray(value));
  }

  get costToExercise(): Array<BigDecimal> {
    let value = this.get("costToExercise");
    return value!.toBigDecimalArray();
  }

  set costToExercise(value: Array<BigDecimal>) {
    this.set("costToExercise", Value.fromBigDecimalArray(value));
  }

  get totalPremiumsPaid(): BigDecimal {
    let value = this.get("totalPremiumsPaid");
    return value!.toBigDecimal();
  }

  set totalPremiumsPaid(value: BigDecimal) {
    this.set("totalPremiumsPaid", Value.fromBigDecimal(value));
  }

  get totalFeesPaid(): BigDecimal {
    let value = this.get("totalFeesPaid");
    return value!.toBigDecimal();
  }

  set totalFeesPaid(value: BigDecimal) {
    this.set("totalFeesPaid", Value.fromBigDecimal(value));
  }
}

export class SSOVDepositsState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("asset", Value.fromString(""));
    this.set("optionType", Value.fromString(""));
    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("strategy", Value.fromString(""));
    this.set("assetPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pnlUnderlying", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pnlPercentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedValue", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SSOVDepositsState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SSOVDepositsState entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SSOVDepositsState", id.toString(), this);
    }
  }

  static load(id: string): SSOVDepositsState | null {
    return changetype<SSOVDepositsState | null>(
      store.get("SSOVDepositsState", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get optionType(): string {
    let value = this.get("optionType");
    return value!.toString();
  }

  set optionType(value: string) {
    this.set("optionType", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get assetPrice(): BigDecimal {
    let value = this.get("assetPrice");
    return value!.toBigDecimal();
  }

  set assetPrice(value: BigDecimal) {
    this.set("assetPrice", Value.fromBigDecimal(value));
  }

  get pnlUnderlying(): BigDecimal {
    let value = this.get("pnlUnderlying");
    return value!.toBigDecimal();
  }

  set pnlUnderlying(value: BigDecimal) {
    this.set("pnlUnderlying", Value.fromBigDecimal(value));
  }

  get pnlPercentage(): BigDecimal {
    let value = this.get("pnlPercentage");
    return value!.toBigDecimal();
  }

  set pnlPercentage(value: BigDecimal) {
    this.set("pnlPercentage", Value.fromBigDecimal(value));
  }

  get totalDepositedValue(): BigDecimal {
    let value = this.get("totalDepositedValue");
    return value!.toBigDecimal();
  }

  set totalDepositedValue(value: BigDecimal) {
    this.set("totalDepositedValue", Value.fromBigDecimal(value));
  }
}

export class SSOVPurchasesState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("asset", Value.fromString(""));
    this.set("optionType", Value.fromString(""));
    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("strategy", Value.fromString(""));
    this.set("pnlPercentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pnlUnderlying", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SSOVPurchasesState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SSOVPurchasesState entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SSOVPurchasesState", id.toString(), this);
    }
  }

  static load(id: string): SSOVPurchasesState | null {
    return changetype<SSOVPurchasesState | null>(
      store.get("SSOVPurchasesState", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get optionType(): string {
    let value = this.get("optionType");
    return value!.toString();
  }

  set optionType(value: string) {
    this.set("optionType", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get strategy(): string {
    let value = this.get("strategy");
    return value!.toString();
  }

  set strategy(value: string) {
    this.set("strategy", Value.fromString(value));
  }

  get pnlPercentage(): BigDecimal {
    let value = this.get("pnlPercentage");
    return value!.toBigDecimal();
  }

  set pnlPercentage(value: BigDecimal) {
    this.set("pnlPercentage", Value.fromBigDecimal(value));
  }

  get pnlUnderlying(): BigDecimal {
    let value = this.get("pnlUnderlying");
    return value!.toBigDecimal();
  }

  set pnlUnderlying(value: BigDecimal) {
    this.set("pnlUnderlying", Value.fromBigDecimal(value));
  }
}

export class Heartbeat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Heartbeat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Heartbeat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Heartbeat", id.toString(), this);
    }
  }

  static load(id: string): Heartbeat | null {
    return changetype<Heartbeat | null>(store.get("Heartbeat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ETHBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ETHBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ETHBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ETHBalance", id.toString(), this);
    }
  }

  static load(id: string): ETHBalance | null {
    return changetype<ETHBalance | null>(store.get("ETHBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class JonesVaultPnL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("dateStr", Value.fromString(""));
    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("asset", Value.fromString(""));
    this.set("pnlPercentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pnlUnderlying", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalSSOVCAssetsDeposited",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("SSOVCDepositPnl", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("SSOVCPurchasePnl", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("SSOVPDepositPnl", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("SSOVPPurchasePnl", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalAssetsFarming", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("farmPnl", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("epochStartingAssets", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unallocatedAssetValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currentAssetsWithPnl", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("assetPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("vaultState", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JonesVaultPnL entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save JonesVaultPnL entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("JonesVaultPnL", id.toString(), this);
    }
  }

  static load(id: string): JonesVaultPnL | null {
    return changetype<JonesVaultPnL | null>(store.get("JonesVaultPnL", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get dateStr(): string {
    let value = this.get("dateStr");
    return value!.toString();
  }

  set dateStr(value: string) {
    this.set("dateStr", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get pnlPercentage(): BigDecimal {
    let value = this.get("pnlPercentage");
    return value!.toBigDecimal();
  }

  set pnlPercentage(value: BigDecimal) {
    this.set("pnlPercentage", Value.fromBigDecimal(value));
  }

  get pnlUnderlying(): BigDecimal {
    let value = this.get("pnlUnderlying");
    return value!.toBigDecimal();
  }

  set pnlUnderlying(value: BigDecimal) {
    this.set("pnlUnderlying", Value.fromBigDecimal(value));
  }

  get totalSSOVCAssetsDeposited(): BigDecimal {
    let value = this.get("totalSSOVCAssetsDeposited");
    return value!.toBigDecimal();
  }

  set totalSSOVCAssetsDeposited(value: BigDecimal) {
    this.set("totalSSOVCAssetsDeposited", Value.fromBigDecimal(value));
  }

  get SSOVCDepositPnl(): BigDecimal {
    let value = this.get("SSOVCDepositPnl");
    return value!.toBigDecimal();
  }

  set SSOVCDepositPnl(value: BigDecimal) {
    this.set("SSOVCDepositPnl", Value.fromBigDecimal(value));
  }

  get SSOVCPurchasePnl(): BigDecimal {
    let value = this.get("SSOVCPurchasePnl");
    return value!.toBigDecimal();
  }

  set SSOVCPurchasePnl(value: BigDecimal) {
    this.set("SSOVCPurchasePnl", Value.fromBigDecimal(value));
  }

  get SSOVPDepositPnl(): BigDecimal {
    let value = this.get("SSOVPDepositPnl");
    return value!.toBigDecimal();
  }

  set SSOVPDepositPnl(value: BigDecimal) {
    this.set("SSOVPDepositPnl", Value.fromBigDecimal(value));
  }

  get SSOVPPurchasePnl(): BigDecimal {
    let value = this.get("SSOVPPurchasePnl");
    return value!.toBigDecimal();
  }

  set SSOVPPurchasePnl(value: BigDecimal) {
    this.set("SSOVPPurchasePnl", Value.fromBigDecimal(value));
  }

  get totalAssetsFarming(): BigDecimal {
    let value = this.get("totalAssetsFarming");
    return value!.toBigDecimal();
  }

  set totalAssetsFarming(value: BigDecimal) {
    this.set("totalAssetsFarming", Value.fromBigDecimal(value));
  }

  get farmPnl(): BigDecimal {
    let value = this.get("farmPnl");
    return value!.toBigDecimal();
  }

  set farmPnl(value: BigDecimal) {
    this.set("farmPnl", Value.fromBigDecimal(value));
  }

  get epochStartingAssets(): BigDecimal {
    let value = this.get("epochStartingAssets");
    return value!.toBigDecimal();
  }

  set epochStartingAssets(value: BigDecimal) {
    this.set("epochStartingAssets", Value.fromBigDecimal(value));
  }

  get unallocatedAssetValue(): BigDecimal {
    let value = this.get("unallocatedAssetValue");
    return value!.toBigDecimal();
  }

  set unallocatedAssetValue(value: BigDecimal) {
    this.set("unallocatedAssetValue", Value.fromBigDecimal(value));
  }

  get currentAssetsWithPnl(): BigDecimal {
    let value = this.get("currentAssetsWithPnl");
    return value!.toBigDecimal();
  }

  set currentAssetsWithPnl(value: BigDecimal) {
    this.set("currentAssetsWithPnl", Value.fromBigDecimal(value));
  }

  get assetPrice(): BigDecimal {
    let value = this.get("assetPrice");
    return value!.toBigDecimal();
  }

  set assetPrice(value: BigDecimal) {
    this.set("assetPrice", Value.fromBigDecimal(value));
  }

  get vaultState(): string {
    let value = this.get("vaultState");
    return value!.toString();
  }

  set vaultState(value: string) {
    this.set("vaultState", Value.fromString(value));
  }
}

export class JonesEpochStarted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("asset", Value.fromString(""));
    this.set("ssovcEpoch", Value.fromBigInt(BigInt.zero()));
    this.set("ssovpEpoch", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("jAssetAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JonesEpochStarted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save JonesEpochStarted entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("JonesEpochStarted", id.toString(), this);
    }
  }

  static load(id: string): JonesEpochStarted | null {
    return changetype<JonesEpochStarted | null>(
      store.get("JonesEpochStarted", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get ssovcEpoch(): BigInt {
    let value = this.get("ssovcEpoch");
    return value!.toBigInt();
  }

  set ssovcEpoch(value: BigInt) {
    this.set("ssovcEpoch", Value.fromBigInt(value));
  }

  get ssovpEpoch(): BigInt {
    let value = this.get("ssovpEpoch");
    return value!.toBigInt();
  }

  set ssovpEpoch(value: BigInt) {
    this.set("ssovpEpoch", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get jAssetAmount(): BigDecimal {
    let value = this.get("jAssetAmount");
    return value!.toBigDecimal();
  }

  set jAssetAmount(value: BigDecimal) {
    this.set("jAssetAmount", Value.fromBigDecimal(value));
  }
}

export class HedgingStrategyState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("dateStr", Value.fromString(""));
    this.set("asset", Value.fromString(""));
    this.set("totalUnderlyingValue", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HedgingStrategyState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HedgingStrategyState entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HedgingStrategyState", id.toString(), this);
    }
  }

  static load(id: string): HedgingStrategyState | null {
    return changetype<HedgingStrategyState | null>(
      store.get("HedgingStrategyState", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get dateStr(): string {
    let value = this.get("dateStr");
    return value!.toString();
  }

  set dateStr(value: string) {
    this.set("dateStr", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get totalUnderlyingValue(): BigDecimal {
    let value = this.get("totalUnderlyingValue");
    return value!.toBigDecimal();
  }

  set totalUnderlyingValue(value: BigDecimal) {
    this.set("totalUnderlyingValue", Value.fromBigDecimal(value));
  }
}
